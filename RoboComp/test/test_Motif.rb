# Code Generated by ZenTest v. 3.10.0
#                 classname: asrt / meth =  ratio%
#                     Motif:    0 /   11 =   0.00%
#                   Measure:    0 /    1 =   0.00%

require 'test/unit' unless defined? $ZENTEST and $ZENTEST
require 'robo_comp.rb'

#require 'test/unit/testcase'
#require 'test/unit' if $0 == __FILE__

class TestMotif < Test::Unit::TestCase
  
  def test_get
#    @myMotif = getMotif
#    
#    @myMeasure = @myMotif.get()
#    play @myMeasure
#    
#    @myMeasure = @myMotif.get 2
#    play @myMeasure
#    
#    @myMeasure = @myMotif.get 1,2
#    play @myMeasure
#    
#    @myMeasure = @myMotif.get 1..2
#    play @myMeasure
#    
#    @myMeasure = @myMotif.get 1..2,1,1
#    play @myMeasure

  end
  
#  def test_and
#    @myMotif = getMotif
#    
#    m1 = @myMotif.get 
#    m2 = @myMotif.get
# 
#    m3 = m1 + m2
#    
#    play m3
#    
#  end
  
 
def test_transpose
    mycomp = load "/home/dbalchen/Music/IndianRain/melody.mid"
    pt = get 1
    
    play pt & pt.tr(5) & pt.tr(3) & pt.tr(7)
end

#  def test_and
#    mycomp = load "/home/dbalchen/workspace/RoboComp/maribaT1.mid"
#    
#    pt = get 1
#    
#    pt.rm(9)
    
#    pp = pt.clone
#    
#    pp = pp * 2
#    
#    mycomp = load "/home/dbalchen/workspace/RoboComp/maribaT2.mid"
#    
#    ppp = get 1
#    
#    p3 = ppp & pp
#    
#    play p3 | $mel
#  end
  
#   def test_percent
#       @myMotif = getMotif
#      
#      m1 = @myMotif.get 
#      m2 = @myMotif.get 2
#      
#      m3 = m2 % m1
#      
#      play m3
#      
#    end
#  
#  
  def test_instrument
    raise NotImplementedError, 'Need to write test_instrument'
  end
  
  def test_instrument_equals
    raise NotImplementedError, 'Need to write test_instrument_equals'
  end
  
  def test_invert
    raise NotImplementedError, 'Need to write test_invert'
  end
  
  def test_markov
    raise NotImplementedError, 'Need to write test_markov'
  end
  
  def test_notes
    raise NotImplementedError, 'Need to write test_notes'
  end
  
  def test_notes_equals
    raise NotImplementedError, 'Need to write test_notes_equals'
  end
  
  def test_or
    raise NotImplementedError, 'Need to write test_or'
  end
  
  def test_perm
    raise NotImplementedError, 'Need to write test_perm'
  end
  
  def test_plus
    raise NotImplementedError, 'Need to write test_plus'
  end
  
  def test_retrograde
    raise NotImplementedError, 'Need to write test_retrograde'
  end
  
  def test_rhythm_retrograde
    raise NotImplementedError, 'Need to write test_rhythm_retrograde'
  end
  
  def test_rmarkov
    raise NotImplementedError, 'Need to write test_rmarkov'
  end
  
  def test_rperm
    raise NotImplementedError, 'Need to write test_rperm'
  end
  
  def test_seed
    raise NotImplementedError, 'Need to write test_seed'
  end
  
  def test_seed_equals
    raise NotImplementedError, 'Need to write test_seed_equals'
  end
  
  def test_strict_invert
    raise NotImplementedError, 'Need to write test_strict_invert'
  end
  
#  def test_times
#    
#      @myMotif = getMotif()
#          
#      m1 = @myMotif * 4
#      
#      play m1
#
#    raise NotImplementedError, 'Need to write test_times'
#  end
  
  def test_title
    raise NotImplementedError, 'Need to write test_title'
  end
  
  def test_title_equals
    raise NotImplementedError, 'Need to write test_title_equals'
  end
  
  def getMotif
    clear
    myComp = load "/home/dbalchen/workspace/RoboComp/motiftest.mid"
    return myComp.tracks.last
  end
end
